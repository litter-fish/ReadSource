1. 定义一个组件
    public class User {

        private String name;

        private String email;

        ......
    }
2. 定义一个xsd文件描述组件内容
    <schema
            xmlns="http://www.w3.org/2001/XMLSchema"
            targetNamespace="http://www.fish.org/schema/user" // 指定一个命名空间
            xmlns:tns="http://www.fish.org/schema/user"
            elementFormDefault="qualified">
        <element name="user">
            <complexType>
                <attribute name ="id" type = "string"/> // id不是组件的属性？？？？
                <attribute name="name" type="string"></attribute>
                <attribute name="email" type="string"></attribute>
            </complexType>
        </element>
    </schema>

3. 创建一个文件，实现BeanDefinitionParser接口，解析xsd文件中的定义和组件定义
    import org.springframework.beans.factory.support.BeanDefinitionBuilder;
    import org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser;
    import org.springframework.util.StringUtils;
    import org.w3c.dom.Element;

    public class UserBeanDefinitionParse extends AbstractSingleBeanDefinitionParser {

        // Element对应的类
        @Override
        protected Class getBeanClass(Element element) {
            return User.class;
        }

        @Override
        protected void doParse(Element element, BeanDefinitionBuilder builder) {
            String name = element.getAttribute("name");
            String email = element.getAttribute("email");
            if (StringUtils.hasText(name)) {
                builder.addPropertyValue("name", name);
            }
            if (StringUtils.hasText(email)) {
                builder.addPropertyValue("email", email);
            }
        }
    }


4. 创建一个handler文件，扩展自NamespaceHandlerSupport，将组件注册到spring中
    import org.springframework.beans.factory.xml.NamespaceHandlerSupport;

    public class MyNamespaceHandler extends NamespaceHandlerSupport {
        public void init() {
            registerBeanDefinitionParser("user", new UserBeanDefinitionParse());
        }
    }


5. 编写Spring.handlers、Spring.schemas文件
    Spring.handlers
        http\://www.fish.org/schema/user=MyNamespaceHandler // 注意http后面的\符合

    Spring.schemas
        http\://www.fish.org/schema/user.xsd=META-INF/user.xsd


源码
1. 根据命名空间在Spring.handlers中找到对应的NamespaceHandler处理类
    public NamespaceHandler resolve(String namespaceUri) {
    		// 获取所有已经配置的handler映射
    		Map handlerMappings = getHandlerMappings();
    		// 根据命名空间找到对应信息
    		Object handlerOrClassName = handlerMappings.get(namespaceUri);
    		if (handlerOrClassName == null) {
    			return null;
    		}
    		else if (handlerOrClassName instanceof NamespaceHandler) {
    			// 如果做过处理，直接从缓存中取
    			return (NamespaceHandler) handlerOrClassName;
    		}
    		else {
    			// 没做过解析返回的是类的路径
    			String className = (String) handlerOrClassName;
    			try {
    				// 使用反射将类路径转换成类
    				Class handlerClass = ClassUtils.forName(className, this.classLoader);
    				if (!NamespaceHandler.class.isAssignableFrom(handlerClass)) {
    					throw new FatalBeanException("Class [" + className + "] for namespace [" + namespaceUri +
    							"] does not implement the [" + NamespaceHandler.class.getName() + "] interface");
    				}
    				// 初始化类
    				NamespaceHandler namespaceHandler = (NamespaceHandler) BeanUtils.instantiateClass(handlerClass);
    				// 调用自定义的初始化方法，初始化标签对应的解析器
    				namespaceHandler.init();
    				// 记录缓存
    				handlerMappings.put(namespaceUri, namespaceHandler);
    				return namespaceHandler;
    			}
    			catch (ClassNotFoundException ex) {
    				throw new FatalBeanException("NamespaceHandler class [" + className + "] for namespace [" +
    						namespaceUri + "] not found", ex);
    			}
    			catch (LinkageError err) {
    				throw new FatalBeanException("Invalid NamespaceHandler class [" + className + "] for namespace [" +
    						namespaceUri + "]: problem with handler class file or dependent class", err);
    			}
    		}
    	}
2. 查找对应标签的解析器
    public final BeanDefinition parse(Element element, ParserContext parserContext) {
    		return findParserForElement(element, parserContext).parse(element, parserContext);
    }

    private BeanDefinitionParser findParserForElement(Element element, ParserContext parserContext) {
        BeanDefinitionParser parser = (BeanDefinitionParser) this.parsers.get(element.getLocalName()); // 根据标签名称找处理器
        if (parser == null) {
            parserContext.getReaderContext().fatal(
                    "Cannot locate BeanDefinitionParser for element [" + element.getLocalName() + "]", element);
        }
        return parser;
    }


3. bean的加载

4. spring循环依赖
    1. 构造器循环依赖
        bean的创建过程中，会将bean的标示符放到一个“正在创建缓存中”，当bean创建时如果检查到这个缓存中已经存在则会抛出BeanCurrentlyCreationException异常，当bean创建完成，
        会将其从“缓存”删除

    2. setter循环依赖
        提前使用默认构造函数进行创建bean，在创建过程中会将其放倒正在创建缓存中进行提前暴露，

    3. prototype的创建
